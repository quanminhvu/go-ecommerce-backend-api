version: '3.9'

services:
  # My sql service
  mysql:
    image: mysql:8.0
    container_name: mysql_v8_container
    environment:
      - MYSQL_ROOT_PASSWORD=098poiA@
      - MYSQL_DATABASE=golang-learn
      - MYSQL_USER=quanvm
      - MYSQL_PASSWORD=098poiA@
    ports:
      - "3306:3306"
    volumes:
      - ./database_docker:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis service
  # redis:
  #   image: redis:7.0
  #   container_name: redis_v7_container
  #   ports:
  #     - "${REDIS_PORT}:6379"
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s
  
  # # redis/redisinsight service
  # redisinsight:
  #   image: redis/redisinsight:latest
  #   container_name: redisinsight_container
  #   ports:
  #     - "15540:5540"
  #   environment:
  #     - REDIS_HOSTS=redis:6379
  #   depends_on:
  #     - redis

  # # Zookeeper service - Kafka dependency injection for cluster management and monitoring
  # zookeeper:
  #   image: bitnami/zookeeper:3.8
  #   container_name: zookeeper_container
  #   ports:
  #     - "${ZOOKEEPER_PORT}:2181"
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   volumes:
  #     - zookeeper_data:/bitnami/zookeeper

  # # Kafka service
  # kafka:
  #   image: bitnami/kafka:3.5
  #   container_name: kafka_container
  #   ports:
  #     - "${KAFAK_PORT_INTERNAL}:${KAFAK_PORT_INTERNAL}" # Internal listener
  #     - "${KAFAK_PORT_EXTERNAL}:${KAFAK_PORT_EXTERNAL}" # External listener - use in application
  #   environment:
  #     # Zookeeper configuration
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      
  #     # Listener configurations
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     - KAFKA_CFG_LISTENERS=INTERNAL://:${KAFAK_PORT_INTERNAL},EXTERNAL://:${KAFAK_PORT_EXTERNAL}
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:${KAFAK_PORT_INTERNAL},EXTERNAL://localhost:${KAFAK_PORT_EXTERNAL}
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL

  #     # Performance and operational settings
  #     - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
  #     - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
  #     - KAFKA_CFG_NUM_PARTITIONS=3
  #     - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      
  #     # Heap and performance tuning
  #     - KAFKA_HEAP_OPTS=-Xmx1G -Xms512M
      
  #     # Log retention
  #     - KAFKA_CFG_LOG_RETENTION_HOURS=168
  #     - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      
  #     # Authentication
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   depends_on:
  #     - zookeeper
  #   volumes:
  #     - kafka_data:/bitnami/kafka

  # # Kafka UI (Optional)
  # kafka_ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka_ui
  #   ports:
  #     - "${KAFKA_UI_PORT}:8080"
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:${KAFAK_PORT_INTERNAL}
  #   depends_on:
  #     - kafka

  # # Schema Registry (Optional but recommended)
  # schema_registry:
  #   image: confluentinc/cp-schema-registry:7.4.1
  #   container_name: schema_registry
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - SCHEMA_REGISTRY_HOST_NAME=schema_registry
  #     - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka:${KAFAK_PORT_INTERNAL}
  #   depends_on:
  #     - kafka
  #     - zookeeper

volumes:
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local